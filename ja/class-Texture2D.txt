!テクスチャ2D / Texture 2D

$$Texture$$ により $$Meshe$$, $$Particle$$, および インタフェースに活力を与えます。それらはオブジェクトの上に重ねたり囲んだりする画像イメージや動画です。重要なものであり、多くのプロパティがあります。


オブジェクトで使用するシェーダにより、テクスチャに特定の要件を満たすことが必要とされますが、原則としては任意の画像イメージファイルをプロジェクトに配置できます。もしサイズ要件（下記に示す）を満たせば、インポートされてゲームで使用するための最適化がなされます。これは マルチレイヤーの Photoshop または TIFF ファイルに拡張されます - インポート時に平坦化され、ゲームでサイズによるマイナス効果をなくします。平坦化は Unity 内部で行なわれ、任意であるためレイヤーに悪影響を与えずに PSD ファイルを保存してインポートを継続して行なうことが出来ます。言い換えれば PSD ファイルは平坦化されない、ということです。


!! プロパティ

$$Texture Inspector$$ はその他のものと比較してかなり違って見えます: \\
Attach:TexImporterFull40.png

インスペクタは 2 つのセクションに分割され、 $$Texture Importer$$ およびテクスチャ プレビューがあります。

!! テクスチャ インポータ

全てのテクスチャは $$Project Folder$$ の画像イメージファイルから来ます。どのようにインポートされるかは $$Texture Importer$$ により指定されます。これらは $$Project View$$ の中でファイル テクスチャを選択し、 $$Inspector$$ 上の $$Texture Importer$$ で修正することで変更できます。

インスペクタの最上位のアイテムは ^^Texture Type^^ メニューにより元画像イメージファイルから作成したいテクスチャの型を選択できます。

||PROPS
||``Texture Type`` ||ここで選択をしてテクスチャの用途に従って基本的なパラメータをセットします。||
||>>>``Texture`` ||全てのテクスチャで使用される最も一般的な設定です。||
||>>>``Normal Map`` ||ここで選択をしてカラーチャネルをリアルタイム法線マッピングに合った形式に変えます。ページ最後の Details セクションを確認して下さい。||
||>>>``Sprite`` ||テクスチャが 2D ゲームで $$Sprite$$ として使用するならばここで選択をする必要があります。||
||>>>``GUI`` ||もしテクスチャが任意の HUD/GUI コントロールで使用するならば使用して下さい。||
||>>>``Reflection`` ||キューブマップとしても知られ、テクスチャの反射を作成するために使用します。詳細な情報については [[class-Cubemap|キューブマップ テクスチャ]] をチェックして下さい。||
||>>>``Cookie`` ||テクスチャにおいて、ライティングのクッキーで使用する基本的なパラメータをセットアップします。||
||>>>``Advanced`` ||テクスチャで特定のパラメータがほしいときに選択をして、テクスチャに対して詳細まで制御したい場合にここで選択をします。||

Attach:TexImporterTexture40.png\\
''選択された基本的なテクスチャ設定''

||``Alpha From Grayscale``||もし有効化されると、アルファ透明度チャネルは、画像イメージの現在の明るさ/暗さの値にもとづいて生成されます。||
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに適しています。ページ最後の Details セクションを確認して下さい。||

Attach:TexImporterNormalMap40.png\\
''テクスチャ インポータの法線マップ設定''

||``Create from Greyscale`` ||有効化すると、Bumpiness および Filtering オプションが表示されます。||
||``Bumpiness`` ||バンプの強度を制御します||
||``Filtering`` ||バンプの強度を計算する方法を決定します||
||>>>``Smooth`` ||スムーズな法線マップを生成||
||>>>``Sharp`` ||ゾーベルフィルタとも知られています。これにより標準よりシャープな法線マップを生成します。||
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに適しています。ページ最後の Details セクションを確認して下さい。||

Attach:TexImporterGUI40.png\\
''テクスチャ インポータの GUI 設定''

||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||

Attach:TexImporterSprite43.png\\
''テクスチャ インポータのスプライト設定''

||``Sprite mode`` ||スプライト グラフィックスがどのように画像から抽出されるかを選択します。||
||>>>``Single`` ||独立してスプライトイメージが使用されます。||
||>>>``Multiple`` ||複数の関連したスプライト（例えば、アニメーションフレーム）は同じパターンを使用します。スプライトエディタを起動するボタンも表示します。||
||``Packing Tag`` ||このテクスチャがパックされるべき対象のスプライト アトラス名（必須ではない）です。||
||``Pixels To Units`` ||ワールド座標における 1 距離単位に相当するスプライト画像イメージの幅/高さのピクセル数です。||
||``Pivot`` ||スプライトのローカル座標システムにおける画像イメージの配置です（中央、左上、その他）。||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||


Attach:TexImporterCursor40.png\\
''テクスチャ インポータのカーソル設定''

||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||

Attach:TexImporterReflection40.png\\
''テクスチャ インポータの鏡面設定''

||``Mapping`` ||テクスチャがキューブマップにマッピングされる方法を決定します。||
||>>>``Sphere Mapped`` ||テクスチャを "球状の" キューブマップにマッピングします。||
||>>>``Cylindrical`` ||テクスチャをシリンダにマッピングします。オブジェクトの鏡面をシリンダ状としたい場合に使用します。||
||>>>``Simple Sphere`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形します。||
||>>>``Nice Sphere`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形しますが、テクスチャのタイリングを見ることができます。||
||>>>``6 Frames Layout`` ||テクスチャは 6 つの画像を標準キューブマップのレイアウトへと連続または交互に並べ (+x -x +y -y +z -z) 、さらに画像イメージは水平または垂直の向きとすることが出来ます。||
||``Fixup edge seams`` ||マップ画像イメージの端でつなげた部分に、光沢の鏡面を使用する場合に発生する画像の乱れを取り除きます。||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに適しています。ページ最後の Details セクションを確認して下さい。||


シーンに視覚的なディテールをたくさん加える興味深い方法は、 $$Cookie$$ を使用することです - これはゲームにおけるライティングの正確な外見を制御するためのグレースケール テクスチャです。これは雲の移動や生い茂った枝葉を作成するのにピッタリです。これら全てのより詳細は [[class-Light|Light]] ページにあり、テクスチャをクッキーで使用可能とするために重要なことは ^^Texture Type^^ を Cookie に設定することです。

Attach:TexImporterCookie40.png\\
''テクスチャ インポータのクッキー設定''

||``Light Type`` ||テクスチャに適用されるライティング（Spotlight, Point または Directional Lights のいずれか）。Directional Lights の場合、テクスチャはタイリングされテクスチャ インスペクタで Edge Mode を ``Repeat`` にセットする必要があります。スポットライトではクッキー テクスチャの端を黒にして正しいエフェクトが得られるようにすべきです。テクスチャ インスペクタでは、Edge Mode を ``Clamp`` にセットします。||
||``Mapping`` ||(Point Light のみ) テクスチャに対して Point Light の球状に投影するようにマッピングします。||
||>>>``Sphere Mapped`` ||テクスチャを "球状の" キューブマップにマッピングします。||
||>>>``Cylindrical`` ||テクスチャをシリンダにマッピングします。オブジェクトの鏡面をシリンダ状としたい場合に使用します。||
||>>>``Simple Sphere`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形します。||
||>>>``Nice Sphere`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形しますが、テクスチャのタイリングを見ることができます。||
||>>>``6 Frames Layout`` ||テクスチャは 6 つの画像を標準キューブマップのレイアウトへと連続または交互に並べ (+x -x +y -y +z -z) 、さらに画像イメージは水平または垂直の向きとすることが出来ます。||
||``Fixup edge seams`` ||マップ画像イメージの端でつなげた部分に、光沢の鏡面を使用する場合に発生する画像の乱れを取り除きます。||
||``Alpha from Greyscale`` ||もし有効化されると、アルファ透明度チャネルは、画像イメージの現在の明るさ/暗さの値にもとづいて生成されます。||

Attach:TexImporterLightmap40.png\\
''テクスチャ インポータのライトマップ設定''

||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに適しています。ページ最後の Details セクションを確認して下さい。||

Attach:TexImporterAdvanced40.png\\
''Advanced Texture Importer Settings ダイアログ''


||``Non Power of 2`` ||もしテクスチャ サイズが 2 のべき乗以外のサイズの場合、これによりインポート時のスケール動作を定義します。詳細についてはページの最後の Details セクションを参照して下さい。||
||>>>``None`` ||テクスチャ サイズは保持されます||
||>>>``To nearest`` ||テクスチャはインポート時にもっとも近い 2 のべき乗サイズにスケールされます。例えば 257x511 のテクスチャは 256x512 となります。PVRTC 形式では正方形である（幅と高さが同じ）必要性があるため、最終的なサイズは 512x512 となります。||
||>>>``To larger`` ||テクスチャはインポート時に次に大きい 2 のべき乗サイズにスケールされます。例えば 257x511 のテクスチャは 512x512 となります。||
||>>>``To smaller`` ||テクスチャはインポート時に次に小さい 2 のべき乗サイズにスケールされます。例えば 257x511 のテクスチャは 256x256 となります。||
||``Generate Cube Map`` ||異なる生成手法を使用してテクスチャからキューブマップを生成します。||
||>>>``Spheremap`` ||テクスチャを "球状の" キューブマップにマッピングします。||
||>>>``Cylindrical`` ||テクスチャをシリンダにマッピングします。オブジェクトの鏡面をシリンダ状としたい場合に使用します。||
||>>>``SimpleSpheremap`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形します。||
||>>>``NiceSpheremap`` ||テクスチャを球にマッピングします。回転する際に鏡面を変形しますが、テクスチャのタイリングを見ることができます。||
||>>>``FacesVertical`` ||テクスチャはキューブの 6 つの面を垂直な一直線に並べます (+x -x +y -y +z -z)||
||>>>``FacesHorizontal`` ||テクスチャはキューブの 6 つの面を水平な一直線に並べます（order +x -x +y -y +z -z）||
||>>>``CrossVertical`` ||テクスチャはキューブの 6 つの面を水平向きの十字架状に並べます。||
||>>>``CrossHorizontal`` ||テクスチャはキューブの 6 つの面を水平向きの十字架状に並べます。||
||``Read/Write Enabled`` ||これを選択してテクスチャ データをスクリプトからアクセスできるようにします(GetPixels, SetPixels およびその他の [[ScriptRef:Texture2D.html|Texture2D]] 関数)。 注意 どのようにテクスチャ データが作成されようとも、テクスチャ アセットに必要なメモリ量は倍となります。絶対に必要な場合のみ使用して下さい。これは非圧縮および DTX 圧縮のテクスチャでのみ有効であり、その他の圧縮テクスチャの種類では読みこむことが出来ません。デフォルトでは無効です。||
||``Import Type`` ||画像イメージデータの扱い||
||>>>``Default`` ||標準テクスチャ||
||>>>``Normal Map`` ||テクスチャは法線マップとして扱います（他のオプションを有効化）||
||>>>``Lightmap`` ||テクスチャはライトマップとして扱われます（他のオプションを無効化）||
||``Alpha from grayscale`` ||（デフォルトモードのみ）画像イメージの明るさ情報からアルファチャネルを生成します||
||``Create from grayscale`` ||(法線マップモードのみ) 画像イメージの明るさ情報からマップを作成します||
||``Bypass sRGB sampling`` ||(デフォルトモードのみ) ガンマを考慮するのでなく、画像イメージどおりのカラーの値を使用します（テクスチャが GUI または非画像イメージデータをエンコードする方法として使用する場合に役に立ちます）||
||``Generate Mip Maps`` ||これを選択すると、ミップマップの生成が有効になります。 ミップマップはより小さいテクスチャで、テクスチャが画面上で非常に小さい場合に使用されます。 詳細については、ページの最後の Details セクションを参照してください。||
||``In Linear Space`` ||ミップマップをリニアカラー空間で生成する ||
||``Border Mip Maps`` ||これを選択すると、色が下位のミップ レベルの端ににじみ出ることがなくなります。 ライト Cookie (下記参照) に使用されます。 ||
||``Mip Map Filtering`` ||画質を最適化できるミップ マップ フィルタリングには次の 2 つの方法があります。 ||
||>>>``Box`` ||ミップ マップをフェードアウトする最も簡単な方法。ミップ レベルは、サイズが小さくなるに連れ、より滑らかになります。 ||
||>>>``Kaiser`` ||鋭角化カイザー アルゴリズムは、サイズが小さくなるに連れ、ミップ マップで実行されます。 テクスチャが遠くでぼやけが多すぎる場合、このオプションを試してください。 ||
||``Fade Out Mipmaps`` ||ミップ レベルが上がるに連れ、ミップ マップをグレーにフェードするのに、これを有効にします。 これは、詳細マップに使用されます。 一番左のスクロールは、フェードアウトを始める最初のミップ レベルです。 一番右のスクロールは、テクスチャが完全にグレーアウトするミップレベルを定義します。
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||変形でストレッチされる際に、テクスチャをどのようにフィルタリングするかを選択します。 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます||
||>>>``Trilinear`` ||Bilinear と同じですが、テクスチャも異なるミップ レベル間でぼやけます。||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに適しています。ページ最後の Details セクションを確認して下さい。||


!! プラットフォーム毎のオーバーライド

異なるプラットフォーム向けにビルドするとき、ターゲット プラットフォームにおけるテクスチャの解像度、サイズおよび品質を考慮する必要があります。デフォルトとなるオプションをセットして特定のプラットフォームでデフォルト設定を上書き（オーバーライド）できます。

Attach:TextureImporterOverride.png\\
''全てのプラットフォームのデフォルト設定''
||``Max Texture Size`` ||インポートされたテクスチャの最大サイズ。 アーティストは、大きなテクスチャを扱いたい場合が多くあります。これで、テクスチャを適切なサイズに縮小します。 ||
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``Compressed`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 ||
||>>>``Truecolor`` ||Truecolor、最高画質になります。 256x256 テクスチャの場合は、256 KB。 ||

^^Texture Type^^ を ^^Advanced^^ に設定している場合、^^Texture Format^^ は異なる値になります。


!!デスクトップ
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB 16 bit`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。||
||>>>``RGBA 16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 圧縮 DXT　形式は、メモリをあまり使用せず、通常は見た目もよくなります。 256x256 テクスチャの場合は、128 KB。||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。最高画質になります。 256x256 テクスチャの場合は、256 KBで、費用がかかります。 ほとんどの場合、__DXT5__は、はるかに小さいサイズで十分な画質を提供します。 DXT 圧縮は目に見える画質損失を生じるため、これは主に法線マップに使用します。||

!!iOS
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed PVRTC 4 bits`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGBA Compressed PVRTC 4 bits`` ||圧縮された RGBA テクスチャ。 これは、透明性のあるデフューズおよびスペキュラ制御テクスチャに使用される主な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed PVRTC 2 bits`` ||圧縮された RGB テクスチャ。 デフューズ テクスチャに適したより低い画質形式。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGBA Compressed PVRTC 2 bits`` ||圧縮された RGBA テクスチャ。 デフューズおよびスペキュラ コントロール テクスチャに適したより低い画質形式。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 この形式は iOS ではサポートされていませんが、デスクトップとの下位互換性に対して維持されます。 ||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGBA テクスチャ。 この形式は iOS ではサポートされていませんが、デスクトップとの下位互換性に対して維持されます。 ||
||>>>``RGB 16 bit`` ||アルファなしの 65,000 色。 PVRTC 形式よりも多くのメモリを使用しますが、UI または階調度のないクリスプ テクスチャにより適している場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。 ||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。 ||
||>>>``RGBA 16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 PVRTC 形式よりも多くのメモリを使用しますが、正確なアルファ チャンネルが必要な場合に便利な場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。最高画質になります。 256x256 テクスチャの場合は、256 KBで、費用がかかります。 ほとんどの場合、__PVRTC__は、はるかに小さいサイズで十分な画質を提供します。 ||
||``Compression quality`` ||Fastで高パフォーマンス、Bestで高画質、Normalでふたつのバランスをとります

!!Android
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 Nvidia Tegra でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGBA テクスチャ。 Nvidia Tegra でサポートされています。 ピクセルあたり 6 ビット (256x256 テクスチャの場合は、64 KB)。 ||
||>>>``RGB Compressed ETC 4 bits`` ||圧縮された RGB テクスチャ。 これは、Android プロジェクトのデフォルトのテクスチャ形式になります。 ETC1 は、OpenGL ES 2.0 の一部で、すべての OpenGL ES 2.0 GPU でサポートされています。 アルファはサポートしていません。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed PVRTC 2 bits`` ||圧縮された RGB テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGBA Compressed PVRTC 2 bits`` ||圧縮された RGBA テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGB Compressed PVRTC 4 bits`` ||圧縮された RGB テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGBA Compressed PVRTC 4 bits`` ||圧縮された RGBA テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed ATC 4 bits`` ||圧縮された RGB テクスチャ。 Qualcomm Snapdragon でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``RGBA Compressed ATC 8 bits`` ||圧縮された RGBA テクスチャ。 Qualcomm Snapdragon でサポートされています。 ピクセルあたり 6 ビット (256x256 テクスチャの場合は、64 KB)。 ||
||>>>``RGB 16 bit`` ||アルファなしの 65,000 色。 圧縮形式よりも多くのメモリを使用しますが、UI または階調度のないクリスプ テクスチャにより適している場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。 ||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。 ||
||>>>``RGBA 16 bit`` ||低画質 True Color。 アルファ チャンネルのあるテクスチャに対するデフォルトの圧縮。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。アルファのあるテクスチャに対する最高画質圧縮になります。 256x256 テクスチャの場合は、256 KB。 |
||``Compression quality`` ||Fastで高パフォーマンス、Bestで高画質、Normalでふたつのバランスをとります

Tegra など特定のハードウェアを対象としていない場合、ETC1 圧縮の使用をお勧めします。 必要な場合、外部のアルファ チャンネルを格納し、より低いテクスチャ フットプリントからメリットが得られます。
テクスチャにアルファ チャンネルを本当に格納したい場合、RGBA16 ビットは、すべてのハードウェア ベンダーが対応している圧縮方法になります。

テクスチャは DDS ファイルからインポート出来ますが、 DXT または非圧縮ピクセル形式のみが現在サポートされます。

アプリケーションがサポートされていないテクスチャ圧縮を使用する場合、テクスチャは、RGBA 32 に解凍され、圧縮テクスチャと共にメモリに格納されます。
この場合、テクスチャの解凍に無駄な時間を使い、2 回格納することでメモリも無駄になります。 これはまた、レンダリング パフォーマンスに大きな悪影響を及ぼす場合があります。

!!Flash
||``Format`` ||画像フォーマット||
||>>>``RGB JPG Compressed`` ||JPG形式に圧縮された RGB 画像データ||
||>>>``RGBA JPG Compressed`` ||JPG形式に圧縮された RGBA 画像データ (すなわちアルファあり)||
||>>>``RGB 24-bit`` ||非圧縮 RGB 画像データ、チャネルあたり 8 ビット||
||>>>``RGBA 32-bit`` ||非圧縮 RGBA 画像データ、チャネルあたり 8 ビット||


!! 詳細


!!! サポートされる形式
Unity は次のファイル形式を読み込み出来ます: PSD, TIFF, JPG, TGA, PNG, GIF, BMP, IFF, PICT。Unity により複数レイヤーの PSD および TIFF ファイルも問題なくインポートできることに留意してください。これらはインポート時に自動的に平坦化されますが、レイヤーはアセット上で保持されるため、これらのファイル形式を使用するときにデータを失うことはありません。これは重要なことであり、3D モデリング アプリケーション を通して Photoshop で使用するテクスチャがひとつだけで済ませることが出来ます。



!!! テクスチャ サイズ

テクスチャ サイズは縦横ともに 2 のべき乗であることが理想です。相当するサイズは: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048 等のピクセルです。テクスチャは正方形である必要はありません、すなわち幅と高さが異なっても問題ありません。各プラットフォームにより最大テクスチャ サイズによる制約があるかもしれないことに留意して下さい。

Unity で他のテクスチャ サイズ（2 のべき乗でない - "NPOT"）を使用することも可能です。2 のべき乗でないテクスチャ サイズは一般的により多くのメモリを使用し、 GPU による読み込みが遅くなるため、パフォーマンス観点では出来るかぎり 2 のべき乗サイズを使用すべきです。もしプラットフォームまたは GPU が NPOT テクスチャ サイズをサポートしない場合、 Unity はテクスチャに対してスケールおよびパディングをして次に近い 2 のべき乗サイズに変更し、これによりさらにメモリの使用されロードが遅くなります（実際には Flash および古い Android デバイスでは常に発生します）。一般的には 2 のべき乗以外のサイズはGUI用にのみ使われます。

2 のべき乗でないサイズのテクスチャアセットは、Import Settings の Advanced Texture Typeにて ``Non Power of 2`` オプションを使用して、インポート時に拡大できます。

!!! UV マッピング

3D モデルに 2D テクスチャをマッピングするとき、一種のラッピングが行なわれます。これは $$UV Mapping$$ と呼ばれて 3D モデリング アプリケーションで行なわれます。Unity の中で [[class-Material|マテリアル]] を使用してテクスチャのスケールおよび移動が出来ます。法線マップおよび詳細マップのスケールは特に役に立ちます。



!!! ミップマップ

ミップマップはプログレッシブでより小さくした画像イメージを複数集めた一覧であり、これによりリアルタイム 3D エンジンでのパフォーマンスを最適化します。カメラから遠く離れたオブジェクトはテクスチャの小さいものを使用します。ミップマップを使用すると 33% 多くメモリを使用しますが、使用しないとパフォーマンスのロスが顕著になります。ゲームのテクスチャでは常にミップマップを使用すべきで、唯一の例外は小さくされることのないテクスチャです（例．GUI テクスチャ）。


!!! 法線マップ

法線マップは法線マップ シェーダにより使用されてローポリゴンのモデルがよりディテールがあるように見せます。 Unity は RGB 画像としてエンコードされたほう線マップを使用します。グレースケールの高低マップの画像イメージから法線マップを生成する選択肢もあります。

!!! 詳細マップ

地形を作成するとき、一般的にはメイン テクスチャを使用して草、岩、砂、等々を表示します。もし地形が十分な大きさである場合、非常にぼやけて見えます。 [[HOWTO-UseDetailTexture|詳細 テクスチャ]] はメイン テクスチャがすぐ近くになるとこれを隠すように小さなディテールをフェードインして表示させます。

詳細テクスチャを描画するとき、中間のグレーが透明であり、メイン テクスチャで白の場合は倍の明るさとなり、黒の場合はメインテクスチャを黒になるまで暗くします。


!!! 反射 (キューブマップ)

反射マップでテクスチャを使用したい場合（例えば ``Reflective`` ビルトイン シェーダを使用する）、 [[class-Cubemap|キューブマップ テクスチャ]] を使用する必要があります。


!!! 異方性フィルタリング

異方性フィルタリングは、グレージング角から表示された時に、レンダリング費用をある程度犠牲にして画質を向上します (この費用は全体的にグラフィック カードに依存します)。 異方性レベルを上げるのは通常、地面および床テクスチャにとってよいアイディアです。 [[class-QualitySettings | Quality Settings]] では、異方性フィルタリングは、すべてのテクスチャに強制的に実行できるか、全体的に無効にできます。

Attach:AnisotropicComparison.png \\
''地面テクスチャに使用される非異方性 (左)/最大異方性(右)''
